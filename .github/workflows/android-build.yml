name: Build Android App
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          echo "Installing NPM dependencies..."
          npm ci || npm install
          npx capacitor --version
          echo "Installed packages:"
          npm list --depth=0 @capacitor/android @capacitor/core @capacitor/cli

      - name: Create .env file
        run: |
          echo "Creating .env file with Firebase credentials..."
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo ".env file created successfully"

      - name: Build Web App
        run: |
          echo "Building web application..."
          npm run build
          ls -la dist/public || echo "Warning: dist/public directory not found"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Fix Capacitor Config
        run: |
          echo "Creating Capacitor configuration file..."
          cat > capacitor.config.json << EOL
          {
            "appId": "com.solofitness.app",
            "appName": "Solo Leveling Fitness",
            "webDir": "dist/public",
            "server": {
              "androidScheme": "https"
            },
            "android": {
              "buildOptions": {
                "jvmArgs": [
                  "-Xmx3072m",
                  "-XX:+HeapDumpOnOutOfMemoryError",
                  "-Dfile.encoding=UTF-8"
                ]
              }
            }
          }
          EOL
          cat capacitor.config.json

      - name: Initialize Capacitor
        run: |
          echo "Initializing Capacitor..."
          npx cap init "Solo Leveling Fitness" com.solofitness.app --web-dir=dist/public || echo "Cap init already done"
          npx cap add android
          echo "Capacitor initialized with Android platform"

      - name: Fix Android Build Configuration
        run: |
          echo "Fixing Android build configuration..."
          
          # Fix main build.gradle
          if [ -f "android/build.gradle" ]; then
            sed -i 's/com.android.tools.build:gradle:7.0.4/com.android.tools.build:gradle:7.4.2/g' android/build.gradle || echo "Could not update gradle version"
          fi
          
          # Configure app/build.gradle
          if [ -f "android/app/build.gradle" ]; then
            # Check if compileOptions already exists
            if ! grep -q "compileOptions {" android/app/build.gradle; then
              echo "
          android {
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
              lintOptions {
                  abortOnError false
              }
          }" >> android/app/build.gradle
            fi
          fi
          
          # Make sure to use correct dependency versions
          if [ -f "android/app/build.gradle" ]; then
            cat android/app/build.gradle
          fi

      - name: Configure Gradle properties
        run: |
          echo "Configuring Gradle properties..."
          mkdir -p android
          cat > android/gradle.properties << EOL
          org.gradle.jvmargs=-Xmx3072m -Dfile.encoding=UTF-8 -XX:+UseParallelGC
          android.useAndroidX=true
          android.enableJetifier=true
          android.overridePathCheck=true
          org.gradle.parallel=true
          org.gradle.daemon=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          # Fix TLS issues
          systemProp.javax.net.ssl.trustStoreType=JKS
          EOL
          cat android/gradle.properties

      - name: Sync Capacitor
        run: |
          echo "Synchronizing Capacitor files to Android project..."
          npx cap sync android
          ls -la android/app/src/main/assets/public || echo "Warning: web assets not synced properly"

      - name: Make Gradlew Executable
        run: |
          echo "Making Gradle wrapper executable..."
          chmod +x android/gradlew
          ls -la android/gradlew

      - name: Setup Gradle Wrapper
        run: |
          echo "Setting up Gradle wrapper..."
          cd android
          ./gradlew --version || (echo "Gradle wrapper might be corrupted, recreating it..." && cd .. && rm -rf android/gradle && mkdir -p android/gradle/wrapper && cd android && ./gradlew wrapper --gradle-version 7.6)

      - name: Configure Android SDK
        run: |
          echo "Configuring Android SDK..."
          mkdir -p $HOME/.android
          echo '### User Sources for Android SDK Manager' > $HOME/.android/repositories.cfg

      - name: Build Debug APK with verbose output
        run: |
          echo "Building debug APK..."
          cd android
          ./gradlew --refresh-dependencies
          ./gradlew clean
          ./gradlew assembleDebug --info --stacktrace

      - name: Backup build in case of failure
        if: failure()
        run: |
          echo "Saving build logs for debugging..."
          mkdir -p build-logs
          find android -name "*.log" -type f -exec cp {} build-logs/ \;
          find android -name "*.txt" -type f -exec cp {} build-logs/ \;
          
      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build-logs/

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error

      - name: APK Build Status
        run: |
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ APK build successful!"
            ls -la android/app/build/outputs/apk/debug/app-debug.apk
          else
            echo "❌ APK build failed!"
            exit 1
          fi
