name: Build Android App
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          echo "Installing NPM dependencies..."
          npm ci || npm install
          npx capacitor --version
          echo "Installed packages:"
          npm list --depth=0 @capacitor/android @capacitor/core @capacitor/cli

      - name: Create .env file
        run: |
          echo "Creating .env file with Firebase credentials..."
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo ".env file created successfully"

      - name: Build Web App
        run: |
          echo "Building web application..."
          npm run build
          ls -la dist/public || echo "Warning: dist/public directory not found"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Fix Capacitor Config
        run: |
          echo "Creating Capacitor configuration file..."
          cat > capacitor.config.json << EOL
          {
            "appId": "com.solofitness.app",
            "appName": "Solo Leveling Fitness",
            "webDir": "dist/public",
            "server": {
              "androidScheme": "https"
            },
            "android": {
              "buildOptions": {
                "jvmArgs": [
                  "-Xmx3072m",
                  "-XX:+HeapDumpOnOutOfMemoryError",
                  "-Dfile.encoding=UTF-8"
                ]
              }
            }
          }
          EOL
          cat capacitor.config.json

      - name: Initialize Capacitor
        run: |
          echo "Initializing Capacitor..."
          # Check if capacitor.config.json exists, if not create it
          if [ ! -f "capacitor.config.json" ]; then
            npx cap init "Solo Leveling Fitness" com.solofitness.app --web-dir=dist/public || echo "Cap init already done"
          else
            echo "Capacitor already initialized, skipping init step"
          fi
          
          # Check if android platform exists before adding it
          if [ ! -d "android" ]; then
            echo "Adding Android platform..."
            npx cap add android
          else
            echo "Android platform already exists, skipping add step"
          fi
          
          echo "Capacitor setup completed"

      - name: Fix Android Build Configuration
        run: |
          echo "Fixing Android build configuration..."
          
          # Fix main build.gradle (root)
          if [ -f "android/build.gradle" ]; then
            echo "Updating main build.gradle..."
            
            # Create backup of original file
            cp android/build.gradle android/build.gradle.backup
            
            # Check if the buildscript block exists and has classpath
            if grep -q "classpath" android/build.gradle; then
              # Update the Android Gradle plugin version
              sed -i 's/com.android.tools.build:gradle:[0-9.]\+/com.android.tools.build:gradle:7.4.2/g' android/build.gradle
              echo "Updated existing Android Gradle plugin version"
            else
              # If no buildscript block or it's malformed, rewrite it
              echo "Creating correct buildscript configuration..."
              cat > android/build.gradle << EOL
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

apply from: "variables.gradle"

task clean(type: Delete) {
    delete rootProject.buildDir
}
EOL
              echo "Rewrote main build.gradle with proper configuration"
            fi
          else
            echo "Main build.gradle not found, creating it..."
            mkdir -p android
            cat > android/build.gradle << EOL
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

apply from: "variables.gradle"

task clean(type: Delete) {
    delete rootProject.buildDir
}
EOL
            echo "Created new main build.gradle with proper configuration"
          fi
          
          # Create variables.gradle if it doesn't exist
          if [ ! -f "android/variables.gradle" ]; then
            echo "Creating variables.gradle..."
            cat > android/variables.gradle << EOL
ext {
    minSdkVersion = 22
    compileSdkVersion = 33
    targetSdkVersion = 33
    androidxActivityVersion = '1.4.0'
    androidxAppCompatVersion = '1.4.2'
    androidxCoordinatorLayoutVersion = '1.2.0'
    androidxCoreVersion = '1.8.0'
    androidxFragmentVersion = '1.4.1'
    junitVersion = '4.13.2'
    androidxJunitVersion = '1.1.3'
    androidxEspressoCoreVersion = '3.4.0'
    cordovaAndroidVersion = '10.1.1'
}
EOL
            echo "Created variables.gradle with default values"
          fi
          
          # Configure app/build.gradle
          if [ -f "android/app/build.gradle" ]; then
            echo "Updating app/build.gradle..."
            
            # Create backup
            cp android/app/build.gradle android/app/build.gradle.backup
            
            # Check if the 'apply plugin' line is present
            if ! grep -q "apply plugin: 'com.android.application'" android/app/build.gradle; then
              echo "Adding missing Android application plugin..."
              echo "apply plugin: 'com.android.application'" > android/app/build.gradle.new
              cat android/app/build.gradle >> android/app/build.gradle.new
              mv android/app/build.gradle.new android/app/build.gradle
            fi
            
            # Check if compileOptions already exists
            if ! grep -q "compileOptions {" android/app/build.gradle; then
              echo "Adding Java 17 compatibility options..."
              if grep -q "android {" android/app/build.gradle; then
                # Add inside existing android block
                sed -i '/android {/a \    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_17\n        targetCompatibility JavaVersion.VERSION_17\n    }\n    lintOptions {\n        abortOnError false\n    }' android/app/build.gradle
              else
                # Add complete android block
                echo "
android {
    namespace 'com.solofitness.app'
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId 'com.solofitness.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    lintOptions {
        abortOnError false
    }
}" >> android/app/build.gradle
              fi
            fi
            
            # Add necessary dependencies if they're missing
            if ! grep -q "implementation project(':capacitor-android')" android/app/build.gradle; then
              echo "Adding missing dependencies..."
              echo "
dependencies {
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}" >> android/app/build.gradle
            fi
          else
            echo "app/build.gradle not found, creating it..."
            mkdir -p android/app
            cat > android/app/build.gradle << EOL
apply plugin: 'com.android.application'

android {
    namespace 'com.solofitness.app'
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId 'com.solofitness.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
EOL
            echo "Created new app/build.gradle with proper configuration"
          fi
          
          # Display the updated files for debugging
          echo "Contents of android/build.gradle:"
          cat android/build.gradle
          
          echo "Contents of android/app/build.gradle:"
          cat android/app/build.gradle

      - name: Configure Gradle properties
        run: |
          echo "Configuring Gradle properties..."
          mkdir -p android
          cat > android/gradle.properties << EOL
          org.gradle.jvmargs=-Xmx3072m -Dfile.encoding=UTF-8 -XX:+UseParallelGC
          android.useAndroidX=true
          android.enableJetifier=true
          android.overridePathCheck=true
          org.gradle.parallel=true
          org.gradle.daemon=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          # Fix TLS issues
          systemProp.javax.net.ssl.trustStoreType=JKS
          EOL
          cat android/gradle.properties

      - name: Sync Capacitor
        run: |
          echo "Synchronizing Capacitor files to Android project..."
          npx cap sync android
          ls -la android/app/src/main/assets/public || echo "Warning: web assets not synced properly"

      - name: Make Gradlew Executable
        run: |
          echo "Making Gradle wrapper executable..."
          chmod +x android/gradlew
          ls -la android/gradlew

      - name: Setup Gradle Wrapper
        run: |
          echo "Setting up Gradle wrapper..."
          cd android
          ./gradlew --version || (echo "Gradle wrapper might be corrupted, recreating it..." && cd .. && rm -rf android/gradle && mkdir -p android/gradle/wrapper && cd android && ./gradlew wrapper --gradle-version 7.6)

      - name: Configure Android SDK
        run: |
          echo "Configuring Android SDK..."
          mkdir -p $HOME/.android
          echo '### User Sources for Android SDK Manager' > $HOME/.android/repositories.cfg

      - name: Build Debug APK with verbose output
        run: |
          echo "Building debug APK..."
          cd android
          ./gradlew --refresh-dependencies
          ./gradlew clean
          ./gradlew assembleDebug --info --stacktrace

      - name: Backup build in case of failure
        if: failure()
        run: |
          echo "Saving build logs for debugging..."
          mkdir -p build-logs
          find android -name "*.log" -type f -exec cp {} build-logs/ \;
          find android -name "*.txt" -type f -exec cp {} build-logs/ \;
          
      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build-logs/

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error

      - name: APK Build Status
        run: |
          if [ -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ APK build successful!"
            ls -la android/app/build/outputs/apk/debug/app-debug.apk
          else
            echo "❌ APK build failed!"
            exit 1
          fi
